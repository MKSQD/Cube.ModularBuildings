using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

class BuildingPartTypesDefintionGenerator : UnityEditor.AssetModificationProcessor
{
    static string[] OnWillSaveAssets(string[] paths)
    {
        ForceRefreshCode();
        return paths;
    }

    [MenuItem("UnityCore/Generated/Refresh BuildingPartTypes")]
    public static void ForceRefreshCode()
    {
        Directory.CreateDirectory(Application.dataPath + "/Generated/Core/ModularBuildings");

        var definitionPaths = AssetUtils.FindAssetPathsByType<BuildingPartTypesDefintion>();
        if (definitionPaths.Length != 1) {
            Debug.LogError("None or multiple definition files found");
            return;
        }
        var definition = AssetDatabase.LoadAssetAtPath<BuildingPartTypesDefintion>(definitionPaths[0]);
        if (definition == null) {
            Debug.LogError("Failed to load BuildingPartTypesDefintion at '" + definitionPaths[0] + "'");
            return;
        }

        GenerateBuildingPartType(definition);
        GenerateBuildingPartTypes(definition);
    }

    static void GenerateBuildingPartType(BuildingPartTypesDefintion definition)
    {
        var builder = new StringBuilder();
        builder.Append("// Generated by code. Do not edit.\r\n");
        builder.Append("\r\n");
        builder.Append("public enum BuildingPartType : byte\r\n");
        builder.Append("{\r\n");
        if (definition.partTypes != null) {
            foreach (var partType in definition.partTypes) {
                builder.Append("    " + partType.name + ",\r\n");
            }
        }
        builder.Append("}\r\n");

        var scriptPath = Application.dataPath + "/Generated/Core/ModularBuildings/BuildingPartType.gen.cs";
        File.WriteAllText(scriptPath, builder.ToString());
    }

    static void GenerateBuildingPartTypes(BuildingPartTypesDefintion definition)
    {
        var builder = new StringBuilder();
        builder.Append("// Generated by code. Do not edit.\r\n");
        builder.Append("using UnityEngine;\r\n");
        builder.Append("\r\n");
        builder.Append("public static class BuildingPartTypes\r\n");
        builder.Append("{\r\n");
        builder.Append("    public static GameObject GetPrefab(BuildingPartType type)\r\n");
        builder.Append("    {\r\n");
        builder.Append("        switch (type) {\r\n");
        if (definition.partTypes != null) {
            foreach (var partType in definition.partTypes) {
                if (partType.prefab == null)
                    continue;

                var path = AssetDatabase.GetAssetPath(partType.prefab);
                path = AssetUtils.GetResourcePathForAssetPath(path);
                path = path.Substring(0, path.Length - ".prefab".Length);
                builder.Append("            case BuildingPartType." + partType.name + ": return Resources.Load<GameObject>(\"" + path + "\");\r\n");
            }
        }
        builder.Append("        }\r\n");
        builder.Append("        return null;\r\n");
        builder.Append("    }\r\n");
        builder.Append("}\r\n");

        var scriptPath = Application.dataPath + "/Generated/Core/ModularBuildings/BuildingPartTypes.gen.cs";
        File.WriteAllText(scriptPath, builder.ToString());
    }
}