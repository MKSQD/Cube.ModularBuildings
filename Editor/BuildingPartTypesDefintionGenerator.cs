using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

class BuildingPartTypesDefintionGenerator : UnityEditor.AssetModificationProcessor
{
    static string[] OnWillSaveAssets(string[] paths)
    {
        ForceRefreshCode();
        return paths;
    }

    [MenuItem("UnityCore/Generated/Refresh BuildingPartTypes")]
    public static void ForceRefreshCode()
    {
        Directory.CreateDirectory(Application.dataPath + "/Generated/Core/ModularBuildings");

        var definitionPaths = AssetUtils.FindAssetPathsByType<BuildingTypeDefintion>();

        var definitions = new List<BuildingTypeDefintion>();
        foreach(var definitionPath in definitionPaths) {
            var definition = AssetDatabase.LoadAssetAtPath<BuildingTypeDefintion>(definitionPath);
            if (definition == null) {
                Debug.LogError("Failed to load BuildingTypeDefintion at '" + definitionPath + "'");
                return;
            }
            definitions.Add(definition);
        }
        GenerateBuildingPartType(definitions);
        GenerateBuildingPartTypes(definitions);
    }

    static void GenerateBuildingPartType(List<BuildingTypeDefintion> definitions)
    {
        var builder = new StringBuilder();
        builder.Append("// Generated by code. Do not edit.\r\n");
        builder.Append("\r\n");

        builder.Append("public enum BuildingType : byte\r\n");
        builder.Append("{\r\n");
        builder.Append("    None,\r\n");
        foreach (var definition in definitions) {
            builder.Append("    " + definition.name + ",\r\n");
        }
        builder.Append("}\r\n");
        builder.Append("\r\n");

        foreach (var definition in definitions) {
            builder.Append("public enum " + definition.name + "BuildingPartType : byte\r\n");
            builder.Append("{\r\n");
            if (definition.partTypes != null) {
                foreach (var partType in definition.partTypes) {
                    builder.Append("    " + partType.name + ",\r\n");
                }
            }
            builder.Append("}\r\n");
        }


        

        var scriptPath = Application.dataPath + "/Generated/Core/ModularBuildings/BuildingPartType.gen.cs";
        File.WriteAllText(scriptPath, builder.ToString());
    }

    static void GenerateBuildingPartTypes(List<BuildingTypeDefintion> definitions)
    {
        var builder = new StringBuilder();
        builder.Append("// Generated by code. Do not edit.\r\n");
        builder.Append("using UnityEngine;\r\n");
        builder.Append("\r\n");
        builder.Append("public static class BuildingPartTypes\r\n");
        builder.Append("{\r\n");
        builder.Append("    public static GameObject GetPrefab(BuildingType type, byte partType)\r\n");
        builder.Append("    {\r\n");
        builder.Append("        switch (type) {\r\n");
        foreach (var definition in definitions) {
            builder.Append("        case BuildingType." + definition.name + ":\r\n");

            builder.Append("            switch ((" + definition.name + "BuildingPartType)partType) {\r\n");
            if (definition.partTypes != null) {
                foreach (var partType in definition.partTypes) {
                    if (partType.prefab == null)
                        continue;

                    var path = AssetDatabase.GetAssetPath(partType.prefab);
                    path = AssetUtils.GetResourcePathForAssetPath(path);
                    path = path.Substring(0, path.Length - ".prefab".Length);
                    builder.Append("                case " + definition.name + "BuildingPartType." + partType.name + ": return Resources.Load<GameObject>(\"" + path + "\");\r\n");
                }
            }
            builder.Append("            }\r\n");
            builder.Append("            break;\r\n");
        }
        builder.Append("        }\r\n");
        builder.Append("        return null;\r\n");
        builder.Append("    }\r\n");
        builder.Append("}\r\n");

        var scriptPath = Application.dataPath + "/Generated/Core/ModularBuildings/BuildingPartTypes.gen.cs";
        File.WriteAllText(scriptPath, builder.ToString());
    }
}